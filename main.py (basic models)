# Import required libraries
from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import backref

# Initialize the Flask application
app = Flask(__name__)

# Set up the database connection
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///project_manager.db'
db = SQLAlchemy(app)

# Define the Project model
class Project(db.Model):
    project_id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(255), nullable=False)
    start_date = db.Column(db.Date, nullable=False)
    end_date = db.Column(db.Date, nullable=False)
    draft_dates = db.Column(db.String(255), nullable=True)
    progress = db.Column(db.Float, nullable=False, default=0)
    tasks = db.relationship('Task', backref='project', lazy=True)
    notes = db.relationship('Note', backref='project', lazy=True)
    expenses = db.relationship('Expense', backref='project', lazy=True)

    def __repr__(self):
        return f'<Project {self.project_id}: {self.description}>'

# Define the Task model
class Task(db.Model):
    task_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.String(255), nullable=True)
    priority_flag = db.Column(db.String(10), nullable=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.project_id'), nullable=False)

    def __repr__(self):
        return f'<Task {self.task_id}: {self.name}>'

# Define the Note model
class Note(db.Model):
    note_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.String(255), nullable=True)
    folder_access = db.Column(db.String(255), nullable=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.project_id'), nullable=False)

    def __repr__(self):
        return f'<Note {self.note_id}: {self.name}>'

# Define the Expense model
class Expense(db.Model):
    expense_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    notes = db.Column(db.String(255), nullable=True)
    amount = db.Column(db.Float, nullable=False)
    project_id = db.Column(db.Integer, db.ForeignKey('project.project_id'), nullable=False)

    def __repr__(self):
        return f'<Expense {self.expense_id}: {self.name}>'

# Define the home view
@app.route('/')
def home():
    projects = Project.query.all()
    return render_template('home.html', projects=projects)

# Define the project view
@app.route('/project/<int:project_id>')
def project(project_id):
    project = Project.query.get_or_404(project_id)
    return render_template('project.html', project=project)

# Define the add project view
@app.route('/project/add', methods=['GET', 'POST'])
def add_project():
    if request.method == 'POST':
        description = request.form['description']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        draft_dates = request.form['draft_dates']
        project = Project(description=description, start_date=start_date, end_date=end_date, draft_dates=draft_dates)
        db.session.add(project)
        db.session.commit()
        return redirect(url_for('project', project_id=project.project_id
